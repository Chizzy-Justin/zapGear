const express=require("express"),mongoose=require("mongoose"),bodyParser=require("body-parser"),axios=require("axios"),multer=require("multer"),path=require("path"),ejs=require("ejs"),passport=require("passport"),LocalStrategy=require("passport-local").Strategy,GoogleStrategy=require("passport-google-oauth20").Strategy,FacebookStrategy=require("passport-facebook").Strategy;require("dotenv").config();const app=express();app.use(bodyParser.urlencoded({extended:!0})),app.use(bodyParser.json()),app.use("/uploads",express.static(path.join(__dirname,"uploads"))),app.use(express.static(__dirname+"/public"));const dbHost=process.env.DB_HOST;mongoose.connect(dbHost);const db=mongoose.connection;mongoose.connection.once("open",(()=>{console.log("Connected to MongoDB database!")})),app.set("view engine","ejs"),app.set("views",path.join(__dirname,"views")),app.use(require("express-session")({secret:"secret-key",resave:!1,saveUninitialized:!1})),app.use(passport.initialize()),app.use(passport.session()),passport.use(new LocalStrategy({usernameField:"email"},((email,password,done)=>{User.findOne({email:email},((err,user)=>err?done(err):user?user.password!==password?done(null,!1,{message:"Incorrect password."}):done(null,user):done(null,!1,{message:"Incorrect username."})))}))),passport.serializeUser(((user,done)=>{done(null,user.id)})),passport.deserializeUser(((id,done)=>{User.findById(id,((err,user)=>{done(err,user)}))})),passport.use(new GoogleStrategy({clientID:"google-client-id",clientSecret:"google-client-secret",callbackURL:"http://localhost:3000/auth/google/callback"},((accessToken,refreshToken,profile,done)=>{User.findOne({googleId:profile.id},((err,user)=>{if(err)return done(err);if(user)return done(null,user);{const newUser=new User({googleId:profile.id});newUser.save((err=>err?done(err):done(null,newUser)))}}))}))),passport.use(new FacebookStrategy({clientID:"facebook-client-id",clientSecret:"facebook-client-secret",callbackURL:"http://localhost:3000/auth/facebook/callback"},((accessToken,refreshToken,profile,done)=>{User.findOne({facebookId:profile.id},((err,user)=>{if(err)return done(err);if(user)return done(null,user);{const newUser=new User({facebookId:profile.id});newUser.save((err=>err?done(err):done(null,newUser)))}}))})));const storage=multer.diskStorage({destination:function(req,file,cb){cb(null,"public/uploads/")},filename:function(req,file,cb){cb(null,file.originalname)}}),upload=multer({storage:storage}),userSchema=new mongoose.Schema({username:String,email:String,password:String,googleId:String,facebookId:String,address:String,phone_number:String}),User=mongoose.model("User",userSchema),productSchema=new mongoose.Schema({productName:String,productImage:String,productPrice:Number,productDescription:String,productQuantity:Number,productCategory:String}),Product=mongoose.model("Product",productSchema),orderSchema=new mongoose.Schema({date_time:{type:Date,default:Date.now},product_id:{type:mongoose.Schema.Types.ObjectId,ref:"Product"},user_id:{type:mongoose.Schema.Types.ObjectId,ref:"User"},productPrice:Number,username:String,phone_number:Number,address:String,order_status:{type:Boolean,default:!1}});orderSchema.pre("save",(async function(next){try{const user=await User.findById(this.user_id);user&&(this.username=user.username,this.phone_number=user.phone_number,this.address=user.address),next()}catch(error){next(error)}}));const Order=mongoose.model("Order",orderSchema);app.post("/createOrder",(async(req,res)=>{try{const{product_id:product_id,user_id:user_id,username:username,phone_number:phone_number,address:address,price:price}=req.body,newOrder=new Order({product_id:product_id,user_id:user_id,username:username,phone_number:phone_number,address:address,price:price});await newOrder.save(),app.get("/payment-callback",(async(req,res)=>{if("successful"===req.query.status){const transactionDetails=await Transaction.find({ref:req.query.tx_ref}),response=await flw.Transaction.verify({id:req.query.transaction_id});"successful"===response.data.status&&response.data.amount===transactionDetails.amount&&"NGN"===response.data.currency&&(newOrder.order_status=!0,await newOrder.save(),res.status(201).send(newOrder))}}))}catch(error){res.status(400).send(error.message)}})),app.get("/admin",(function(req,res){res.render("anotheradmin")})),app.post("/submitUserForm",(async(req,res)=>{try{const newUser=new User(req.body);await newUser.save(),res.status(201).send(newUser)}catch(error){res.status(400).send(error.message)}})),app.post("/submitProductForm",upload.single("productImage"),(async(req,res)=>{try{const{productName:productName,productPrice:productPrice,productDescription:productDescription,productQuantity:productQuantity,productCategory:productCategory}=req.body,productImage=req.file.originalname,newProduct=new Product({productName:productName,productImage:"/uploads/"+productImage,productPrice:parseFloat(productPrice),productDescription:productDescription,productQuantity:parseInt(productQuantity),productCategory:productCategory});await newProduct.save(),console.log("product saved successfully"),res.redirect("/admin")}catch(error){res.status(400).send(error.message)}})),app.get("/login",((req,res)=>{res.render("login")})),app.post("/login",passport.authenticate("local",{successRedirect:"/profile",failureRedirect:"/login",failureFlash:!0})),app.get("/auth/google",passport.authenticate("google",{scope:["profile"]})),app.get("/auth/google/callback",passport.authenticate("google",{successRedirect:"/profile",failureRedirect:"/login"})),app.get("/auth/facebook",passport.authenticate("facebook")),app.get("/auth/facebook/callback",passport.authenticate("facebook",{successRedirect:"/profile",failureRedirect:"/login"})),app.get("/profile",((req,res)=>{res.send("Welcome "+req.user.email)})),app.get("/",(async(req,res)=>{try{const products=await Product.find();res.render("index",{products:products})}catch(error){res.status(500).send(error.message)}})),app.get("/productPage",(async function(req,res){try{var id=req.query.id,foundProduct=await Product.findOne({_id:id});return foundProduct?res.render("product-page",{product:foundProduct}):(res.redirect("/"),res.status(404).send("Product not found"))}catch(error){return console.error("Error:",error),res.status(500).send("Internal server error")}})),app.get("/addProductToCart",(async function(req,res){const productId=req.query.productId;var addedProduct=await Product.findOne({_id:productId});if(addedProduct)return res.json(addedProduct);console.log("product to be added not found")}));const PORT=process.env.PORT||3e3;app.listen(PORT,(()=>{console.log(`Server is running on port ${PORT}`)}));