const express=require("express"),session=require("express-session"),mongoose=require("mongoose"),bodyParser=require("body-parser"),axios=require("axios"),multer=require("multer"),path=require("path"),ejs=require("ejs"),nodemailer=require("nodemailer"),passport=require("passport"),bcrypt=require("bcryptjs"),crypto=require("crypto"),LocalStrategy=require("passport-local").Strategy,GoogleStrategy=require("passport-google-oauth20").Strategy;require("dotenv").config();const flash=require("express-flash"),Flutterwave=require("flutterwave-node-v3"),flw=new Flutterwave(process.env.FLW_PUBLIC_KEY,process.env.FLW_SECRET_KEY),app=express();app.use(bodyParser.urlencoded({extended:!0})),app.use(flash()),app.use(bodyParser.json()),app.use("/uploads",express.static(path.join(__dirname,"uploads"))),app.use(express.static(__dirname+"/public")),app.use(session({secret:"ahbhrfbrgybvbryvgiurbvaruirbvbrh",resave:!1,saveUninitialized:!0,cookie:{secure:!1}}));const dbHost=process.env.DB_HOST;mongoose.connect(dbHost);const db=mongoose.connection;mongoose.connection.once("open",(()=>{console.log("Connected to MongoDB database!")})),app.set("view engine","ejs"),app.set("views",path.join(__dirname,"views")),app.use(require("express-session")({secret:"secret-key",resave:!1,saveUninitialized:!1})),app.use(passport.initialize()),app.use(passport.session()),passport.use(new LocalStrategy({usernameField:"email"},((email,password,done)=>{User.findOne({email:email}).then((user=>user?user.password!==password?done(null,!1,{message:"Incorrect password."}):(user.isLoggedIn=!0,user.save()):done(null,!1,{message:"Incorrect username."}))).then((savedUser=>{const userData={id:savedUser._id,name:savedUser.name,email:savedUser.email,cartList:savedUser.cartList,cartListBtnIdList:savedUser.cartListBtnIdList,itemQty:savedUser.itemQty};return done(null,userData)})).catch((err=>done(err)))}))),passport.serializeUser(((user,done)=>{done(null,user.id)})),passport.deserializeUser(((id,done)=>{User.findById(id,((err,user)=>{done(err,user)}))})),passport.use(new GoogleStrategy({clientID:"google-client-id",clientSecret:"google-client-secret",callbackURL:"http://localhost:3000/auth/google/callback"},((accessToken,refreshToken,profile,done)=>{User.findOne({googleId:profile.id},((err,user)=>{if(err)return done(err);if(user)return done(null,user);{const newUser=new User({googleId:profile.id});newUser.save((err=>err?done(err):done(null,newUser)))}}))})));const storage=multer.diskStorage({destination:function(req,file,cb){cb(null,"public/uploads/")},filename:function(req,file,cb){cb(null,file.originalname)}}),upload=multer({storage:storage}),userSchema=new mongoose.Schema({username:String,_id:{type:String,required:!0},password:String,googleId:String,facebookId:String,address:String,phone_number:String,isLoggedIn:Boolean,isAdmin:Boolean,firstName:String,lastName:String,cartList:[{price:Number,qty:Number,name:String,img:String,_id:String}],cartListBtnIdList:[String],itemQty:[Number],resetToken:{type:String,default:null},resetTokenExpiration:{type:Date,default:null}},{timestamps:!0}),User=mongoose.model("User",userSchema),productSchema=new mongoose.Schema({productName:String,productImage:String,productPrice:Number,productDescription:String,productQuantity:Number,productCategory:String}),Product=mongoose.model("Product",productSchema),orderSchema=new mongoose.Schema({date_time:{type:Date,default:Date.now},_id:String,user_id:{type:String,ref:"User",required:!0},productPrice:Number,username:String,phone_number:String,address:String,price:Number,cartList:[{price:Number,qty:Number,name:String,img:String,_id:String}],cartListBtnIdList:[String],itemQty:[Number],order_status:{type:Boolean,default:!1}});orderSchema.pre("save",(async function(next){try{const user=await User.findById(this.user_id);user&&(this.username=user.username,this.phone_number=user.phone_number,this.address=user.address,this.cartList=user.cartList,this.itemQty=user.itemQty),next()}catch(error){next(error)}}));const Order=mongoose.model("Order",orderSchema);let otpData={otp:null,generatedAt:null,userEmail:""};function generateOTP(){return Math.floor(1e5+9e5*Math.random()).toString()}function startTimer(){let timeLeft=600;timer=setInterval((()=>{if(timeLeft<=0)return clearInterval(timer),void(otp=generateOTP());timeLeft--}),1e3)}async function sendOtp(userEmail){const otp=generateOTP();startTimer();const hashedOtp=await bcrypt.hash(otp,10);console.log("first hashotp is "+hashedOtp),otpData={otp:hashedOtp,generatedAt:Date.now(),userEmail:userEmail};let mailOptions={from:'"Zap Gear" <chizitelun@gmail.com>',to:userEmail,subject:"Otp Verification",text:` Your OTP verifiation for zapgear signup is ${otp}`};return nodemailer.createTransport({service:"gmail",auth:{user:process.env.NODEMAILER_EMAIL,pass:process.env.NODEMAILER_PASSWORD}}).sendMail(mailOptions,((error,info)=>{error?console.log("Error occurred:",error):console.log("Email sent:",info.response)})),hashedOtp}function isOTPOutdated(){return null!==otpData.generatedAt&&Date.now()-otpData.generatedAt>6e5}function generateOrderId(email){const now=new Date;return`${now.toISOString().slice(0,10).replace(/-/g,"")}${now.toISOString().slice(11,19).replace(/:/g,"")}-${email}-${Math.floor(1e3+9e3*Math.random())}`}var currentOrderId;function generateTransactionReference(){const now=new Date;return`${now.toISOString().slice(0,10).replace(/-/g,"")}${now.toISOString().slice(11,19).replace(/:/g,"")}-${Math.random().toString(36).substring(2,10).toUpperCase()}`}app.post("/createOrder",(async(req,res)=>{try{const userData=await User.findOne({_id:req.body["createOrder-email"]});if(!userData)return res.status(404).send("User not found");const cartList=userData.cartList,itemQty=userData.itemQty;let subtotal=0,VAT=1.1;for(let i=0;i<itemQty.length;i++)subtotal+=itemQty[i]*cartList[i].price;currentOrderId=generateOrderId(userData._id);const Total=(subtotal*VAT).toFixed(2),newOrder=new Order({_id:currentOrderId,user_id:userData._id,username:userData.firstName,phone_number:userData.phone_number,address:userData.address,price:Total,cartList:cartList,itemQty:itemQty});await newOrder.save(),res.render("checkout-html",{userData:userData,itemQty:itemQty,cartList:cartList})}catch(error){res.status(400).send(error.message)}})),app.post("/pay-for-order",(async function(req,res){const orderData=await Order.findOne({_id:currentOrderId});try{const response=await axios.post("https://api.flutterwave.com/v3/payments",{tx_ref:generateTransactionReference(),amount:orderData.price,currency:"NGN",redirect_url:"http://localhost:3000/payment-callback",customer:{email:orderData.user_id,phonenumber:orderData.phone_number,name:orderData.username,firstname:orderData.username},customizations:{title:"ZapGear Payments",logo:"http://www.piedpiper.com/app/themes/joystick-v27/images/logo.png"}},{headers:{Authorization:`Bearer ${process.env.FLW_SECRET_KEY}`,"Content-Type":"application/json"}});response.data&&response.data.data&&response.data.data.link?res.redirect(response.data.data.link):(console.error("Unexpected response format:",response.data),res.status(500).json({error:"Unexpected response format from Flutterwave"}))}catch(error){console.error(error),res.status(500).json({error:"Failed to create payment link"})}})),app.get("/payment-callback",(async(req,res)=>{const{status:status,transaction_id:transaction_id}=req.query;"successful"===status?axios.get(`https://api.flutterwave.com/v3/transactions/${transaction_id}/verify`,{headers:{Authorization:`Bearer ${process.env.FLW_SECRET_KEY}`,"Content-Type":"application/json"}}).then((async response=>{const orderData=await Order.findOne({_id:currentOrderId});orderData.order_status=!0,await orderData.save();const userId=await User.findOne({_id:orderData.user_id});userId.cartList=[],userId.cartListBtnIdList=[],userId.itemQty=[],await userId.save(),res.redirect("http://localhost:3000/?success=payment-success")})).catch((error=>{console.error(error),res.redirect("http://localhost:3000/?message=verification-failure")})):res.redirect("http://localhost:3000/?message=payment-failure")})),app.get("/admin",(function(req,res){res.render("anotheradmin")})),app.post("/submitUserForm",(async(req,res)=>{try{const newUser=new User(req.body);await newUser.save(),res.status(201).send(newUser)}catch(error){res.status(400).send(error.message)}})),app.post("/submitProductForm",upload.single("productImage"),(async(req,res)=>{try{const{productName:productName,productPrice:productPrice,productDescription:productDescription,productQuantity:productQuantity,productCategory:productCategory}=req.body,productImage=req.file.originalname,newProduct=new Product({productName:productName,productImage:"/uploads/"+productImage,productPrice:parseFloat(productPrice),productDescription:productDescription,productQuantity:parseInt(productQuantity),productCategory:productCategory});await newProduct.save(),console.log("product saved successfully"),res.redirect("/admin")}catch(error){res.status(400).send(error.message)}})),app.get("/login",((req,res)=>{res.render("login")})),app.post("/login",(async(req,res)=>{const{email:email,password:password}=req.body;try{const user=await User.findOne({_id:email});if(!user)return res.status(401).json({message:"User does not exist!"});if(!await bcrypt.compare(password,user.password))return res.status(401).json({message:"Wrong password!"});const userData={cartList:user.cartList,cartListBtnIdList:user.cartListBtnIdList,itemQty:user.itemQty,firstName:user.firstName,_id:user._id};req.session.userData=userData,res.redirect("/")}catch(error){console.error("Error during login:",error),res.status(500).json({error:"Internal Server Error"})}})),app.get("/signup",(function(req,res){res.render("signup")})),app.post("/signup",(async(req,res)=>{try{const{email:email,password:password,confirmPassword:confirmPassword,address:address,zipCode:zipCode,state:state,country:country,phoneNumber:phoneNumber,isLoggedIn:isLoggedIn,firstName:firstName,lastName:lastName,cartList:cartList,cartListBtnIdList:cartListBtnIdList,itemQty:itemQty}=req.body;if(console.log("cartList: ",JSON.parse(cartList)),console.log("cartListBtnIdList: ",JSON.parse(cartListBtnIdList)),console.log("itemQty: ",JSON.parse(itemQty)),console.log("firstName: ",firstName),password&&password===confirmPassword){const hashedPassword=await bcrypt.hash(password,10);cartList&&firstName?(async()=>{try{const hashedOtp=await sendOtp(email);console.log("Hashed OTP:",hashedOtp),res.render("otp-page",{email:email,password:hashedPassword,address:address,zipCode:zipCode,state:state,country:country,phoneNumber:phoneNumber,isLoggedIn:isLoggedIn,firstName:firstName,lastName:lastName,cartList:cartList,cartListBtnIdList:cartListBtnIdList,itemQty:itemQty,hashedOtp:hashedOtp})}catch(error){console.error("Error occurred:",error)}})():res.redirect("/signup?message=Incomplete data received")}else res.redirect("/signup?message=Password Does Not Match!")}catch(error){console.error("Error creating user:",error),res.status(500).json({error:"Internal Server Error"})}})),app.post("/verify-otp",(async function(req,res){const{otp1:otp1,otp2:otp2,otp3:otp3,otp4:otp4,otp5:otp5,otp6:otp6,hashedOtp:hashedOtp}=req.body,enteredOTP=otp1.toString()+otp2.toString()+otp3.toString()+otp4.toString()+otp5.toString()+otp6.toString();console.log("ntr is "+enteredOTP),console.log("hash is "+hashedOtp);if(!await bcrypt.compare(enteredOTP,hashedOtp))return res.status(400).send("Invalid OTP. Please try again.");if(isOTPOutdated())return res.status(400).send("OTP has expired. Please generate a new OTP.");const{email:email,password:password,address:address,zipCode:zipCode,state:state,country:country,phoneNumber:phoneNumber,isLoggedIn:isLoggedIn,firstName:firstName,lastName:lastName,cartList:cartList,cartListBtnIdList:cartListBtnIdList,itemQty:itemQty}=req.body,newUser=await new User({_id:email,password:password,address:address,zipCode:zipCode,state:state,country:country,phoneNumber:phoneNumber,isLoggedIn:!0,isAdmin:!1,firstName:firstName,lastName:lastName,cartList:JSON.parse(JSON.parse(cartList)),cartListBtnIdList:JSON.parse(JSON.parse(cartListBtnIdList)),itemQty:JSON.parse(JSON.parse(itemQty))});await newUser.save(),res.redirect("/login?success=User created successfully! Please login.")})),app.post("/resend-otp",(async function(req,res){let data=req.body;console.log(req.body),console.log("the data: ",data);const hashedOtp=await sendOtp(data.email);console.log("resent Hashed OTP:",hashedOtp),res.render("otp-page",{email:data.email,password:data.password,address:data.address,zipCode:data.zipCode,state:data.state,country:data.country,phoneNumber:data.phoneNumber,isLoggedIn:data.isLoggedIn,firstName:data.firstName,lastName:data.lastName,cartList:JSON.parse(data.cartList),cartListBtnIdList:JSON.parse(data.cartListBtnIdList),itemQty:JSON.parse(data.itemQty),hashedOtp:hashedOtp})})),app.get("/forgot-password",(function(req,res){res.render("email-password-reset")})),app.post("/forgot-password",(async(req,res)=>{const userEmail=req.body.passwordResetEmail;try{const user=await User.findOne({_id:userEmail});if(!user)return res.status(404).send("User not found.");const resetToken=crypto.randomBytes(20).toString("hex");user.resetToken=resetToken,user.resetTokenExpiration=Date.now()+6e5,await user.save();const resetLink=`http://localhost:3000/reset-password?token=${resetToken}`;let transporter=nodemailer.createTransport({service:"Gmail",auth:{user:"chizitelun@gmail.com",pass:"bity susm frvk dlmh"}}),mailOptions={from:'"Zap Gear" <chizitelun@gmail.com>',to:userEmail,subject:"Password Reset",text:`You requested a password reset. Click on the following link to reset your password: ${resetLink}`};transporter.sendMail(mailOptions,((error,info)=>{error?(console.log("Error occurred:",error),res.status(500).send("Failed to send reset email.")):(console.log("Email sent:",info.response),res.status(200).send("Password reset link sent to "+userEmail+" successfully. This reset link is only valid for 10 minutes!"))}))}catch(error){console.error("Error:",error),res.status(500).send("Internal server error.")}})),app.get("/reset-password",(function(req,res){const token=req.query.token;res.render("reset-password",{token:token})})),app.post("/reset-password",(async(req,res)=>{const{newPassword:newPassword,confirmNewPassword:confirmNewPassword,token:token}=req.body;if(newPassword===confirmNewPassword)try{const user=await User.findOne({resetToken:token,resetTokenExpiration:{$gt:Date.now()}});if(!user)return console.log("tokn no usr is "+token),res.status(400).send("Invalid or expired reset token.");const hashedPassword=await bcrypt.hash(newPassword,10);user.password=hashedPassword,user.resetToken=void 0,user.resetTokenExpiration=void 0,await user.save(),res.redirect("/login?success=Password reset successfully.")}catch(error){console.error("Error:",error),res.status(500).send("Internal server error.")}})),app.post("/save-user-data",(async(req,res)=>{const{useremail:useremail,cartList:cartList,cartListBtnIdList:cartListBtnIdList,itemQty:itemQty}=req.body;console.log("got stuff from mail: ",useremail),console.log("i got ",cartList);try{console.log("i gottn ",useremail);const user=await User.findOne({_id:useremail});if(console.log("list ",user),!user)return res.status(404).json({error:"User not found."});console.log("i gottn ",useremail),console.log("list ",cartList),console.log("btn ",cartListBtnIdList),user.cartList=cartList,user.cartListBtnIdList=cartListBtnIdList,user.itemQty=itemQty,console.log("us list ",user.cartList),await user.save(),console.log("sav"),res.json({message:"User data updated successfully."})}catch(error){console.error("Error updating user data:",error),res.status(500).json({error:"Internal server error."})}})),app.get("/auth/google",passport.authenticate("google",{scope:["profile","email"]})),passport.use(new GoogleStrategy({clientID:"your_google_client_id",clientSecret:"your_google_client_secret",callbackURL:"http://localhost:3000/auth/google/callback"},(async(accessToken,refreshToken,profile,done)=>{try{let user=await User.findOne({googleId:profile.id});user||(user=new User({googleId:profile.id,username:profile.displayName,email:profile.emails[0].value,phoneNumber:profile.phoneNumber||"",address:profile.address||""}),await user.save()),done(null,user)}catch(error){done(error,null)}}))),app.get("/auth/google/callback",passport.authenticate("google",{failureRedirect:"/login"}),((req,res)=>{res.redirect("/")})),app.get("/",(async(req,res)=>{try{const products=await Product.find(),userDataString=req.session.userData;let userData;if(userDataString)try{userData=userDataString}catch(error){console.error("Error parsing userData:",error),userData=null}else userData=null;res.render("index",{products:products,userData:userData})}catch(error){res.status(500).send(error.message)}})),app.get("/productPage",(async function(req,res){try{var id=req.query.id,foundProduct=await Product.findOne({_id:id});if(foundProduct){const userDataString=req.session.userData;let userData;if(userDataString)try{userData=userDataString}catch(error){console.error("Error parsing userData:",error),userData=null}else userData=null;return res.render("product-page",{product:foundProduct,userData:userData})}return res.redirect("/"),res.status(404).send("Product not found")}catch(error){return console.error("Error:",error),res.status(500).send("Internal server error")}})),app.get("/addProductToCart",(async function(req,res){const productId=req.query.productId;var addedProduct=await Product.findOne({_id:productId});if(addedProduct)return res.json(addedProduct);console.log("product to be added not found")}));const PORT=process.env.PORT||3e3;app.listen(PORT,(()=>{console.log(`Server is running on port ${PORT}`)}));